apply plugin: 'maven-publish'

//TODO: update the group to 'org.mockito' ***AND*** change java packages
group = 'com.nhaarman.mockitokotlin2'

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from 'build/javadoc'
}

task sourceJar(type: Jar) {
    from sourceSets.main.allSource
}

publishing {
    publications {
        javaLibrary(MavenPublication) {
            artifactId 'mockito-kotlin'

            from components.java

            artifact sourceJar {
                classifier "sources"
            }

            artifact javadocJar

            pom.withXml {
                def root = asNode()
                root.appendNode('name', 'Mockito-Kotlin')
                root.appendNode('description', 'Using Mockito with Kotlin.')
                root.appendNode('url', 'https://github.com/mockito/mockito-kotlin')

                def scm = root.appendNode('scm')
                scm.appendNode('url', 'scm:git@github.com:mockito/mockito-kotlin.git')

                def licenses = root.appendNode('licenses')
                def mitLicense = licenses.appendNode('license')
                mitLicense.appendNode('name', 'MIT')

                def developers = root.appendNode('developers')
                def nhaarman = developers.appendNode('developer')
                nhaarman.appendNode('id', 'nhaarman')
                nhaarman.appendNode('name', 'Niek Haarman')
            }
        }
    }

    //useful for testing - running "publish" will create artifacts/pom in a local dir
    repositories { maven { url = "$rootProject.buildDir/repo" } }
}

clean {
    delete "$rootProject.buildDir/repo"
}

// Avoid generation of the module metadata so that we don't have to publish an additional file
// and keep the build logic simple.
tasks.withType(GenerateModuleMetadata) {
    enabled = false
}

//fleshes out problems with Maven pom generation when building
tasks.build.dependsOn('publishJavaLibraryPublicationToMavenLocal')

//Bintray Gradle plugin configuration (https://github.com/bintray/gradle-bintray-plugin)
//Plugin jars are added to the buildscript classpath in the root build.gradle file
apply plugin: 'com.jfrog.bintray'

bintray {
    //We need to use some user id here, because the Bintray key is associated with the user
    //However, any user id is good, so longer the user has necessary privileges to the repository
    user = 'szczepiq' //https://bintray.com/szczepiq
    key = System.getenv('BINTRAY_API_KEY')
    publish = false //can be changed to 'false' for testing
    dryRun = project.hasProperty('bintrayDryRun')

    publications = ['javaLibrary']

    pkg {
        repo = 'test' //https://bintray.com/mockito/maven // TODO change to 'maaven' when CI ready
        userOrg = 'mockito' //https://bintray.com/mockito

        name = 'mockito-kotlin'

        licenses = ['MIT']
        labels = ['kotlin', 'mockito']
        vcsUrl = 'https://github.com/mockito/mockito-kotlin.git'

        version {
            name = project.version
            vcsTag = "v$project.version"

            mavenCentralSync {
                sync = false // TODO enable after CI+bintray integration is ready
                user = System.getenv('NEXUS_TOKEN_USER')
                password = System.getenv('NEXUS_TOKEN_PWD')
            }
        }
    }
}